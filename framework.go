// Code generated by "esc -o framework.go framework"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/framework/commands/console.go": {
		name:    "console.go",
		local:   "framework/commands/console.go",
		size:    39,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VSM7PzU3MSynm5eLlSivNS1bIzMss0dBUUKgGidQCAgAA//8j3b8MJwAA
AA==
`,
	},

	"/framework/config/app.go": {
		name:    "app.go",
		local:   "framework/config/app.go",
		size:    37,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VSM7PS8tM5+Xi5UorzUtWyMzLLNHQVFCoBonUAgIAAP//kX0UnCUAAAA=
`,
	},

	"/framework/database/data/users.json": {
		name:    "users.json",
		local:   "framework/database/data/users.json",
		size:    4,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/4rm5YoFBAAA//8vAaXaBAAAAA==
`,
	},

	"/framework/database/seeds/seeder.go": {
		name:    "seeder.go",
		local:   "framework/database/seeds/seeder.go",
		size:    38,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKE5NTSnm5eLlSivNS1bIzMss0dBUUKgGidTycgECAAD//7ycMm4mAAAA
`,
	},

	"/framework/http/controllers/user.go": {
		name:    "user.go",
		local:   "framework/http/controllers/user.go",
		size:    44,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VSM7PKynKz8lJLSrm5eLlSivNS1bIzMss0dBUqObl4uTlquXlAgQAAP//
XJf0xiwAAAA=
`,
	},

	"/framework/http/requests/user.go": {
		name:    "user.go",
		local:   "framework/http/requests/user.go",
		size:    41,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKEotLE0tLinm5eLlSivNS1bIzMss0dBUUKgGidTycgECAAD//xFJTZQp
AAAA
`,
	},

	"/framework/main.go": {
		name:    "main.go",
		local:   "framework/main.go",
		size:    194,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/zSMMY7DIBBFa5C4wywVbnC/ktut9hIsjPFsMGPhsZUo8t0jIqX977+3hXgLGWENVI02
mtaNm4AzWtlMshx/PvI6/vPCY+bEgvW0HRbO1uihO/NR4zvgBoBnXxS2Bt8TfAz/yyG5wWhFM3T2NUGl
0s9KFc7+J0gozsqC0JgFEjWMwu0BiXGHygJ4p13AYz1hpoK21y6jr1cAAAD//3rkOt/CAAAA
`,
	},

	"/framework/models/user.go": {
		name:    "user.go",
		local:   "framework/models/user.go",
		size:    297,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/2yOvVIrMQyFa3vG76BxtXuLdX87hjQUUCU1cdbKrsn6Z2S5WBjenVGgoEClzvmkr/r5
5heEVAJuzWijY6qFGAajlV0ir/0yzSW5t5jf1+6WQslKxDGhNXoUhPeKcGpI0Jj6zPBhtHo6wM/0mBnO
Qv63lWLytL/ecLdnYZVz4EOAwisSXCNuoRmtpD09i9S99EjoGcMDg/ydjjGh0epUwx9b5+CAG34H/34l
n3Lq2vMMg8iOcPSXDV98wmEU85gXMTdaEXKnDLY3pGbv5FcAAAD//80jiUQpAQAA
`,
	},

	"/framework/resources/views/users/index.go": {
		name:    "index.go",
		local:   "framework/resources/views/users/index.go",
		size:    38,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKC1OLSrm5eLlSivNS1bIzMss0dBUUKgGidTycgECAAD//4J99BImAAAA
`,
	},

	"/framework/routes/api.go": {
		name:    "api.go",
		local:   "framework/routes/api.go",
		size:    39,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKMovLUkt5uXi5UorzUtWyMzLLNHQVFCoBonU8nIBAgAA///rsvgEJwAA
AA==
`,
	},

	"/framework/routes/web.go": {
		name:    "web.go",
		local:   "framework/routes/web.go",
		size:    37,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKMovLUkt5uXi5UorzUtWyMzLLNHQVFCoBonUAgIAAP//lVF6KCUAAAA=
`,
	},

	"/framework/services/user.go": {
		name:    "user.go",
		local:   "framework/services/user.go",
		size:    41,
		modtime: 1597911148,
		compressed: `
H4sIAAAAAAAC/ypITM5OTE9VKE4tKstMTi3m5eLlSivNS1bITczM0dBUUKgGidTycgECAAD//5P5nkkp
AAAA
`,
	},

	"/framework": {
		name:  "framework",
		local: `framework`,
		isDir: true,
	},

	"/framework/commands": {
		name:  "commands",
		local: `framework/commands`,
		isDir: true,
	},

	"/framework/config": {
		name:  "config",
		local: `framework/config`,
		isDir: true,
	},

	"/framework/database": {
		name:  "database",
		local: `framework/database`,
		isDir: true,
	},

	"/framework/database/data": {
		name:  "data",
		local: `framework/database/data`,
		isDir: true,
	},

	"/framework/database/migrations": {
		name:  "migrations",
		local: `framework/database/migrations`,
		isDir: true,
	},

	"/framework/database/seeds": {
		name:  "seeds",
		local: `framework/database/seeds`,
		isDir: true,
	},

	"/framework/http": {
		name:  "http",
		local: `framework/http`,
		isDir: true,
	},

	"/framework/http/controllers": {
		name:  "controllers",
		local: `framework/http/controllers`,
		isDir: true,
	},

	"/framework/http/requests": {
		name:  "requests",
		local: `framework/http/requests`,
		isDir: true,
	},

	"/framework/models": {
		name:  "models",
		local: `framework/models`,
		isDir: true,
	},

	"/framework/resources": {
		name:  "resources",
		local: `framework/resources`,
		isDir: true,
	},

	"/framework/resources/views": {
		name:  "views",
		local: `framework/resources/views`,
		isDir: true,
	},

	"/framework/resources/views/users": {
		name:  "users",
		local: `framework/resources/views/users`,
		isDir: true,
	},

	"/framework/routes": {
		name:  "routes",
		local: `framework/routes`,
		isDir: true,
	},

	"/framework/services": {
		name:  "services",
		local: `framework/services`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"framework": {
		_escData["/framework/commands"],
		_escData["/framework/config"],
		_escData["/framework/database"],
		_escData["/framework/http"],
		_escData["/framework/main.go"],
		_escData["/framework/models"],
		_escData["/framework/resources"],
		_escData["/framework/routes"],
		_escData["/framework/services"],
	},

	"framework/commands": {
		_escData["/framework/commands/console.go"],
	},

	"framework/config": {
		_escData["/framework/config/app.go"],
	},

	"framework/database": {
		_escData["/framework/database/data"],
		_escData["/framework/database/migrations"],
		_escData["/framework/database/seeds"],
	},

	"framework/database/data": {
		_escData["/framework/database/data/users.json"],
	},

	"framework/database/migrations": {},

	"framework/database/seeds": {
		_escData["/framework/database/seeds/seeder.go"],
	},

	"framework/http": {
		_escData["/framework/http/controllers"],
		_escData["/framework/http/requests"],
	},

	"framework/http/controllers": {
		_escData["/framework/http/controllers/user.go"],
	},

	"framework/http/requests": {
		_escData["/framework/http/requests/user.go"],
	},

	"framework/models": {
		_escData["/framework/models/user.go"],
	},

	"framework/resources": {
		_escData["/framework/resources/views"],
	},

	"framework/resources/views": {
		_escData["/framework/resources/views/users"],
	},

	"framework/resources/views/users": {
		_escData["/framework/resources/views/users/index.go"],
	},

	"framework/routes": {
		_escData["/framework/routes/api.go"],
		_escData["/framework/routes/web.go"],
	},

	"framework/services": {
		_escData["/framework/services/user.go"],
	},
}
