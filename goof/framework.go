package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _commands_console_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\xce\xcf\xcd\x4d\xcc\x4b\x29\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\x02\x02\x00\x00\xff\xff\x23\xdd\xbf\x0c\x27\x00\x00\x00")

func commands_console_go() ([]byte, error) {
	return bindata_read(
		_commands_console_go,
		"commands/console.go",
	)
}

var _config_app_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\xce\xcf\x4b\xcb\x4c\xe7\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\x02\x02\x00\x00\xff\xff\x91\x7d\x14\x9c\x25\x00\x00\x00")

func config_app_go() ([]byte, error) {
	return bindata_read(
		_config_app_go,
		"config/app.go",
	)
}

var _database_data_users_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\xe6\xe5\x8a\x05\x04\x00\x00\xff\xff\x2f\x01\xa5\xda\x04\x00\x00\x00")

func database_data_users_json() ([]byte, error) {
	return bindata_read(
		_database_data_users_json,
		"database/data/users.json",
	)
}

var _database_seeds_seeder_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\x4d\x4d\x29\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\xf2\x72\x01\x02\x00\x00\xff\xff\xbc\x9c\x32\x6e\x26\x00\x00\x00")

func database_seeds_seeder_go() ([]byte, error) {
	return bindata_read(
		_database_seeds_seeder_go,
		"database/seeds/seeder.go",
	)
}

var _http_controllers_user_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\xce\xcf\x2b\x29\xca\xcf\xc9\x49\x2d\x2a\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\xa8\xe6\xe5\xe2\xe4\xe5\xaa\xe5\xe5\x02\x04\x00\x00\xff\xff\x5c\x97\xf4\xc6\x2c\x00\x00\x00")

func http_controllers_user_go() ([]byte, error) {
	return bindata_read(
		_http_controllers_user_go,
		"http/controllers/user.go",
	)
}

var _http_requests_user_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4a\x2d\x2c\x4d\x2d\x2e\x29\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\xf2\x72\x01\x02\x00\x00\xff\xff\x11\x49\x4d\x94\x29\x00\x00\x00")

func http_requests_user_go() ([]byte, error) {
	return bindata_read(
		_http_requests_user_go,
		"http/requests/user.go",
	)
}

var _main_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x31\x8e\xc3\x20\x10\x45\x6b\x90\xb8\xc3\x2c\x15\x6e\x70\xbf\x92\xdb\xad\xf6\x12\x2c\x8c\xf1\x6c\x30\x63\xe1\xb1\x95\x28\xf2\xdd\x23\x22\xa5\xfd\xef\xbf\xb7\x85\x78\x0b\x19\x61\x0d\x54\x8d\x36\x9a\xd6\x8d\x9b\x80\x33\x5a\xd9\x4c\xb2\x1c\x7f\x3e\xf2\x3a\xfe\xf3\xc2\x63\xe6\xc4\x82\xf5\xb4\x1d\x16\xce\xd6\xe8\xa1\x3b\xf3\x51\xe3\x3b\xe0\x06\x80\x67\x5f\x14\xb6\x06\xdf\x13\x7c\x0c\xff\xcb\x21\xb9\xc1\x68\x45\x33\x74\xf6\x35\x41\xa5\xd2\xcf\x4a\x15\xce\xfe\x27\x48\x28\xce\xca\x82\xd0\x98\x05\x12\x35\x8c\xc2\xed\x01\x89\x71\x87\xca\x02\x78\xa7\x5d\xc0\x63\x3d\x61\xa6\x82\xb6\xd7\x2e\xa3\xaf\x57\x00\x00\x00\xff\xff\x7a\xe4\x3a\xdf\xc2\x00\x00\x00")

func main_go() ([]byte, error) {
	return bindata_read(
		_main_go,
		"main.go",
	)
}

var _models_user_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xbd\x52\x2b\x31\x0c\x85\x6b\x7b\xc6\xef\xa0\x71\xb5\x7b\x8b\x75\x7f\x3b\x86\x34\x14\x50\x25\x35\x71\xd6\xca\xae\xc9\xfa\x67\x64\xb9\x58\x18\xde\x9d\x51\xa0\xa0\x40\xa5\xce\xf9\xa4\xaf\xfa\xf9\xe6\x17\x84\x54\x02\x6e\xcd\x68\xa3\x63\xaa\x85\x18\x06\xa3\x95\x5d\x22\xaf\xfd\x32\xcd\x25\xb9\xb7\x98\xdf\xd7\xee\x96\x42\xc9\x4a\xc4\x31\xa1\x35\x7a\x14\x84\xf7\x8a\x70\x6a\x48\xd0\x98\xfa\xcc\xf0\x61\xb4\x7a\x3a\xc0\xcf\xf4\x98\x19\xce\x42\xfe\xb7\x95\x62\xf2\xb4\xbf\xde\x70\xb7\x67\x61\x95\x73\xe0\x43\x80\xc2\x2b\x12\x5c\x23\x6e\xa1\x19\xad\xa4\x3d\x3d\x8b\xd4\xbd\xf4\x48\xe8\x19\xc3\x03\x83\xfc\x9d\x8e\x31\xa1\xd1\xea\x54\xc3\x1f\x5b\xe7\xe0\x80\x1b\x7e\x07\xff\x7e\x25\x9f\x72\xea\xda\xf3\x0c\x83\xc8\x8e\x70\xf4\x97\x0d\x5f\x7c\xc2\x61\x14\xf3\x98\x17\x31\x37\x5a\x11\x72\xa7\x0c\xb6\x37\xa4\x66\xef\xe4\x57\x00\x00\x00\xff\xff\xcd\x23\x89\x44\x29\x01\x00\x00")

func models_user_go() ([]byte, error) {
	return bindata_read(
		_models_user_go,
		"models/user.go",
	)
}

var _resources_views_users_index_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2d\x4e\x2d\x2a\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\xf2\x72\x01\x02\x00\x00\xff\xff\x82\x7d\xf4\x12\x26\x00\x00\x00")

func resources_views_users_index_go() ([]byte, error) {
	return bindata_read(
		_resources_views_users_index_go,
		"resources/views/users/index.go",
	)
}

var _routes_api_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\xca\x2f\x2d\x49\x2d\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\xf2\x72\x01\x02\x00\x00\xff\xff\xeb\xb2\xf8\x04\x27\x00\x00\x00")

func routes_api_go() ([]byte, error) {
	return bindata_read(
		_routes_api_go,
		"routes/api.go",
	)
}

var _routes_web_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\xca\x2f\x2d\x49\x2d\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\xcc\xcb\x2c\xd1\xd0\x54\x50\xa8\x06\x89\xd4\x02\x02\x00\x00\xff\xff\x95\x51\x7a\x28\x25\x00\x00\x00")

func routes_web_go() ([]byte, error) {
	return bindata_read(
		_routes_web_go,
		"routes/web.go",
	)
}

var _services_user_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xe6\xe5\xe2\xe5\x4a\x2b\xcd\x4b\x56\xc8\x4d\xcc\xcc\xd1\xd0\x54\x50\xa8\x06\x89\xd4\xf2\x72\x01\x02\x00\x00\xff\xff\x93\xf9\x9e\x49\x29\x00\x00\x00")

func services_user_go() ([]byte, error) {
	return bindata_read(
		_services_user_go,
		"services/user.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"commands/console.go": commands_console_go,
	"config/app.go": config_app_go,
	"database/data/users.json": database_data_users_json,
	"database/seeds/seeder.go": database_seeds_seeder_go,
	"http/controllers/user.go": http_controllers_user_go,
	"http/requests/user.go": http_requests_user_go,
	"main.go": main_go,
	"models/user.go": models_user_go,
	"resources/views/users/index.go": resources_views_users_index_go,
	"routes/api.go": routes_api_go,
	"routes/web.go": routes_web_go,
	"services/user.go": services_user_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"commands/console.go": &_bintree_t{commands_console_go, map[string]*_bintree_t{
	}},
	"config/app.go": &_bintree_t{config_app_go, map[string]*_bintree_t{
	}},
	"database/data/users.json": &_bintree_t{database_data_users_json, map[string]*_bintree_t{
	}},
	"database/seeds/seeder.go": &_bintree_t{database_seeds_seeder_go, map[string]*_bintree_t{
	}},
	"http/controllers/user.go": &_bintree_t{http_controllers_user_go, map[string]*_bintree_t{
	}},
	"http/requests/user.go": &_bintree_t{http_requests_user_go, map[string]*_bintree_t{
	}},
	"main.go": &_bintree_t{main_go, map[string]*_bintree_t{
	}},
	"models/user.go": &_bintree_t{models_user_go, map[string]*_bintree_t{
	}},
	"resources/views/users/index.go": &_bintree_t{resources_views_users_index_go, map[string]*_bintree_t{
	}},
	"routes/api.go": &_bintree_t{routes_api_go, map[string]*_bintree_t{
	}},
	"routes/web.go": &_bintree_t{routes_web_go, map[string]*_bintree_t{
	}},
	"services/user.go": &_bintree_t{services_user_go, map[string]*_bintree_t{
	}},
}}
